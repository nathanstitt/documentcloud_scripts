#!/usr/bin/env ruby

require 'optparse'
require_relative 'mechanize_document_cloud'
require 'faker'
require 'open3'
require 'net/ssh'
require 'net/sftp'
DEF = Hashie::Mash.new({ duration: 65, note_seconds: 10, concurrency: 5 })
options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.on("-s", "--server SERVER", "Host to benchmark") do |opt_val|
    options[:host] = opt_val
  end
  opts.on("-a", "--abserver SERVER", "Host to run ab on") do |opt_val|
    options[:abhost] = opt_val
  end
  opts.on( "-u", "--user USER", "User to ssh as") do |opt_val|
    options[:ssh_user]  = opt_val
  end
  opts.on("-d", "--documents DOCUMENT ID", "Document ID to request") do |opt_val|
    options[:docs] = opt_val
  end
  opts.on("-o", "--output OUTPUT", "File to save graph") do |opt_val|
    options[:output] = opt_val
  end
  opts.on( "--duration NUM_SECONDS", "Number of seconds to run (default #{DEF.seconds})") do |opt_val|
    options[:duration] = opt_val.to_i
  end
  opts.on( "--notes NOTESECONDS", "Make a note every X seconds (default #{DEF.note_seconds})") do |opt_val|
    options[:note_seconds] = opt_val.to_f
  end
  opts.on( "--concurrency COUNT", "Number of concurrent access (default #{DEF.concurrency})") do |opt_val|
    options[:concurrency]  = opt_val.to_i
  end
end

opts.parse!
unless ( blank = [:host,:docs,:output,:abhost,:ssh_user].select{ |param| options[param].nil? } ).empty?
    STDERR.puts "Missing options #{blank.join(', ')}"
    STDERR.puts opts
    exit
end



class Benchmark

  attr_reader :options, :rng, :dc, :docs

  def initialize( opts )
    @options = Hashie::Mash.new( DEF.merge( opts ) )
    auth = YAML::load(File.read('dev_credentials.yml'))
    MechanizeDocumentCloud.site = "https://#{options.host}/"
    @dc=MechanizeDocumentCloud.new( auth[:login], auth[:password] )

    @rng=Random.new(1234)
    @docs = options.docs.split(',').map do | doc_id |
      dc.get("/documents/#{doc_id}.json")
    end
  end

  def run
    clean_notes

    Dir.mktmpdir do |dir|

      ab_pids = docs.map do | doc |
        fork { start_ab( doc ) }
      end

      note_num = 0
      note_pids = []
      while true do
        begin
          Process.getpgid( ab_pids.first ) # we'll stop making notes when first ab exits
          note_num +=1
          note_pids << fork do
            post_note( docs.sample, note_num)
            puts "made note # #{note_num}"
          end
          sleep options.note_seconds
        rescue Errno::ESRCH
          break
        end
      end
      Process.waitall

      docs.each do | doc |
        Net::SFTP.start(options.abhost, options.ssh_user ) do | sftp |
          sftp.download!("/tmp/ab-#{doc.id}.dat", "#{dir}/ab-#{doc.id}.dat")
        end
      end

      massage_data( dir )
      make_chart(dir)
    end
  end


  def start_ab( doc )
    Net::SSH.start(options.abhost, options.ssh_user ) do | ssh |
      cmd = "ab -c #{options.concurrency} -t #{options.duration} -g /tmp/ab-#{doc.id}.dat " +
        "'https://#{options.host}/documents/#{doc.id}.js'"
      ssh.exec!(cmd)
    end
  end


  def clean_notes
    docs.each do | doc |
      puts "cleaning old notes from #{doc.id}"
      dc.get("/documents/#{doc.id}/annotations" ).each do | note |
        dc.delete("/documents/#{doc.id}/annotations/#{note.id}")
      end
    end
  end


  def massage_data(dir)
    seconds = Hash.new{|h, k| h[k] = []}
    docs.each do | doc |
      File.open( "#{dir}/ab-#{doc.id}.dat" ) do | ab |
        ab.each_line do | line |
          (dt,secs,ctime,dtime,ttime,wait) = line.split("\t")
          seconds[ secs.to_i ] << ttime.to_i if secs.to_i > 0
        end
      end
    end
    File.open("#{dir}/ab.dat",'w') do | out |
      min = seconds.keys.min
      seconds.keys.sort.each do | sec |
        results = seconds[sec]
        out.write "%i %d %i %i\n" % ( [ sec-min, results.reduce(:+).to_f / results.size ] + results.minmax )
      end
    end
  end

  def generate_graph( dir )
    #       set size 1.0,0.5
    cmd = <<-EOS .gsub(/^ {2}/, '')
       set terminal png giant
       set output
       set title "Docs #{options.docs}, #{options.duration} secs, #{options.note_seconds.round(1)} between notes"
       set xlabel 'seconds'
       set ylabel 'ms'
       plot "#{dir}/ab.dat" using 1:2:3:4 with yerrorbars title ''
       exit
    EOS
    image, s = Open3.capture2("gnuplot", :stdin_data=>cmd, :binmode=>true)
    return s.success? ? image : false
  end

  def post_note(doc, note_num)
    rand_location = (0..3).map{|n| ( rng.rand * 850).to_i}.join(',')
    dc.post("/documents/#{doc.id}/annotations", {
        :page_number=> rand( doc.pages ), :access=>'public',
        :location=> rand_location, :content=>Faker::Lorem.sentences.join(' '),
        :title=>"#{note_num}-#{Faker::Company.catch_phrase}"
      } )
  end

  def make_chart(dir)
    if image = generate_graph( dir )
      File.open("#{options.output}",'w'){ |f| f.write image }
      puts "Saved image to #{options.output}"
    end
  end

end


Benchmark.new( options ).run
